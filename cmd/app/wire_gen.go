// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/gocopper/copper"
	"github.com/gocopper/copper/chttp"
	"github.com/gocopper/copper/csql"
	"github.com/google/wire"
	"github.com/utibeabasi6/gocopper-crud/pkg/app"
	"github.com/utibeabasi6/gocopper-crud/pkg/todos"
	"github.com/utibeabasi6/gocopper-crud/web"
	"github.com/utibeabasi6/gocopper-crud/web/build"
)

import (
	_ "github.com/mattn/go-sqlite3"
)

// Injectors from wire.go:

func InitServer(copperApp *copper.App) (*chttp.Server, error) {
	lifecycle := copperApp.Lifecycle
	loader := copperApp.Config
	config, err := csql.LoadConfig(loader)
	if err != nil {
		return nil, err
	}
	logger := copperApp.Logger
	db, err := csql.NewDBConnection(lifecycle, config, logger)
	if err != nil {
		return nil, err
	}
	txMiddleware := csql.NewTxMiddleware(db, config, logger)
	requestLoggerMiddleware := chttp.NewRequestLoggerMiddleware(logger)
	querier := csql.NewQuerier(db, config)
	queries := todos.NewQueries(querier)
	htmlDir := _wireFSValue
	staticDir := _wireEmbedFSValue
	v := web.HTMLRenderFuncs()
	chttpConfig, err := chttp.LoadConfig(loader)
	if err != nil {
		return nil, err
	}
	newHTMLRendererParams := chttp.NewHTMLRendererParams{
		HTMLDir:     htmlDir,
		StaticDir:   staticDir,
		RenderFuncs: v,
		Config:      chttpConfig,
		Logger:      logger,
	}
	htmlRenderer, err := chttp.NewHTMLRenderer(newHTMLRendererParams)
	if err != nil {
		return nil, err
	}
	readerWriter := chttp.NewReaderWriter(htmlRenderer, chttpConfig, logger)
	newRouterParams := app.NewRouterParams{
		Todos:  queries,
		RW:     readerWriter,
		Logger: logger,
	}
	router := app.NewRouter(newRouterParams)
	newHTMLRouterParams := chttp.NewHTMLRouterParams{
		StaticDir: staticDir,
		RW:        readerWriter,
		Config:    chttpConfig,
	}
	htmlRouter, err := chttp.NewHTMLRouter(newHTMLRouterParams)
	if err != nil {
		return nil, err
	}
	newHTTPHandlerParams := app.NewHTTPHandlerParams{
		DatabaseTxMW:    txMiddleware,
		RequestLoggerMW: requestLoggerMiddleware,
		App:             router,
		HTML:            htmlRouter,
		Logger:          logger,
	}
	handler := app.NewHTTPHandler(newHTTPHandlerParams)
	newServerParams := chttp.NewServerParams{
		Handler:   handler,
		Lifecycle: lifecycle,
		Config:    chttpConfig,
		Logger:    logger,
	}
	server := chttp.NewServer(newServerParams)
	return server, nil
}

var (
	_wireFSValue      = web.HTMLDir
	_wireEmbedFSValue = build.StaticDir
)

// wire.go:

var WireModule = wire.NewSet(csql.WireModule, wire.InterfaceValue(new(chttp.HTMLDir), web.HTMLDir), wire.InterfaceValue(new(chttp.StaticDir), build.StaticDir), web.HTMLRenderFuncs, copper.WireModule, chttp.WireModule, wire.Struct(new(app.NewHTTPHandlerParams), "*"), app.NewHTTPHandler, app.WireModule, app.NewRouter, wire.Struct(new(app.NewRouterParams), "*"))
